{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardArray","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.02d162de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n            // props -> props.name, props.email, props.id\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        // tipo um bootstrap da vida, mas chama tachyons\r\n        //bg = background color, border3, padding 3, margin3, grow (animacao) \r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // iterando sobre robots e retornando um array que tem as informações necessárias\r\n    // sempre que iterar alguma coisa em react, é necessario criar a propriedade key.\r\n    const cardArray = robots.map((user, i) => {\r\n        return <Card key = {i} \r\n                     id = {robots[i].id} \r\n                     name = {robots[i].name} \r\n                     email = {robots[i].email} />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input       //padding, background, border\r\n            className = 'pa3 ba b--green bg-lightest-blue'\r\n            type = 'search' \r\n            placeholder = 'search robots'\r\n            onChange = {searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style = {{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import { render } from '@testing-library/react';\r\nimport React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    };\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// Para criar interações entre componentes, precisamos criar uma classe para usar o state\r\n// state é a variavel que interage com o codigo todo e faz as coisas mudarem, geralmente fica na classe pai de todas\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        \r\n        }\r\n    }\r\n\r\n    // inicia essa funcao junto com a classe\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response=> response.json())\r\n          .then(users => {this.setState({ robots: users})});\r\n      }\r\n\r\n\r\n    // quando tem alguma função que não é parte do react, usa-se a sintaxe das funções de seta.\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value}) // setter do searchfield\r\n    }\r\n\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state\r\n         // filtrando os robos\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        // criando uma tela de loading\r\n        if (robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return(             //text center\r\n                <div className = 'tc'>\r\n                    <h1 className = 'f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots = {filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );    \r\n        }\r\n     }\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; \n\n\nReactDOM.render(\n  // ta rodandou a tag app em html na raiz da pagina dom  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}